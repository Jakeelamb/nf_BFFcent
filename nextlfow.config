// Global default params
params {
    input = "samples.txt"
    outdir = "./results"
    publish_dir_mode = "copy"
    reference_genome = "/path/to/blackfooted_ferret_genome.fasta"  // Set the actual path to the Black-footed ferret genome
    temp_dir = "./temp"    // Directory for temporary files
    
    // SLURM cluster parameters - all optional
    slurm_account = null    // Optional SLURM account
    slurm_partition = "day-long-cpu"  // Default partition (if not specified by process)
    slurm_qos = null        // Default QOS (if not specified by process)
    
    // Process-specific partition settings
    fastp_partition = "day-long-cpu"
    alignment_partition = "day-long-highmem" 
    ref_index_partition = "day-long-highmem"
    samtools_partition = "day-long-highmem"
    gatk_haplotype_partition = "week-long-highmem"
    gatk_pipe_partition = "week-long-highmem"
    plink2_partition = "day-long-cpu"
    
    // Process-specific QOS settings (with null defaults)
    fastp_qos = null
    alignment_qos = null
    ref_index_qos = null
    samtools_qos = null
    gatk_pipe_qos = null
    gatk_haplotype_qos = null
    plink2_qos = null
    
    // Conda settings
    conda_cache_dir = "$HOME/.nextflow/conda"  // Default cache directory
}

// Process-specific resource configurations
process {
    executor = 'slurm'
    conda = "$projectDir/environment.yml"  // Use environment.yml directly
    
    // Build clusterOptions dynamically with only specified parameters
    clusterOptions = { 
        def options = [] 
        
        if (params.slurm_account) {
            options.add("--account=${params.slurm_account}")
        }
        
        if (params.slurm_partition) {
            options.add("--partition=${params.slurm_partition}")
        }
        
        if (params.slurm_qos) {
            options.add("--qos=${params.slurm_qos}")
        }
        
        return options.join(' ')
    }

    withName: FASTP_TRIM {
        cpus = 4
        memory = '8 GB'
        time = '2h'
        
        clusterOptions = { 
            def options = []
            
            if (params.slurm_account) {
                options.add("--account=${params.slurm_account}")
            }
            
            options.add("--partition=${params.fastp_partition}")
            
            def qos = params.fastp_qos ?: params.slurm_qos
            if (qos) {
                options.add("--qos=${qos}")
            }
            
            return options.join(' ')
        }
    }
    
    withName: BWAMEM2_ALIGN {
        cpus = 24
        memory = '32 GB'
        time = '24h'
        
        clusterOptions = { 
            def options = []
            
            if (params.slurm_account) {
                options.add("--account=${params.slurm_account}")
            }
            
            options.add("--partition=${params.alignment_partition}")
            
            def qos = params.alignment_qos ?: params.slurm_qos
            if (qos) {
                options.add("--qos=${qos}")
            }
            
            return options.join(' ')
        }
    }
    
    withName: SAMTOOLS_PROCESS {
        cpus = 24
        memory = '32 GB'
        time = '24h'
        
        clusterOptions = { 
            def options = []
            
            if (params.slurm_account) {
                options.add("--account=${params.slurm_account}")
            }
            
            options.add("--partition=${params.samtools_partition}")
            
            def qos = params.samtools_qos ?: params.slurm_qos
            if (qos) {
                options.add("--qos=${qos}")
            }
            
            return options.join(' ')
        }
    }
    
    withName: GATK_HAPLOTYPECALLER {
        cpus = 28
        memory = '64 GB'
        time = '24h'
        
        clusterOptions = { 
            def options = []
            
            if (params.slurm_account) {
                options.add("--account=${params.slurm_account}")
            }
            
            options.add("--partition=${params.gatk_haplotype_partition}")
            
            def qos = params.gatk_haplotype_qos ?: params.slurm_qos
            if (qos) {
                options.add("--qos=${qos}")
            }
            
            return options.join(' ')
        }
    }
    
    withName: GATK_JOINT_GENOTYPE {
        cpus = 32
        memory = '64 GB'
        time = '24h'
        
        clusterOptions = { 
            def options = []
            
            if (params.slurm_account) {
                options.add("--account=${params.slurm_account}")
            }
            
            options.add("--partition=${params.gatk_pipe_partition}")
            
            def qos = params.gatk_pipe_qos ?: params.slurm_qos
            if (qos) {
                options.add("--qos=${qos}")
            }
            
            return options.join(' ')
        }
    }

    withName: PLINK2_ANALYSIS {
        cpus = 16
        memory = '64 GB'
        time = '24h'
        
        clusterOptions = { 
            def options = []
            
            if (params.slurm_account) {
                options.add("--account=${params.slurm_account}")
            }
            
            options.add("--partition=${params.plink2_partition}")
            
            def qos = params.plink2_qos ?: params.slurm_qos
            if (qos) {
                options.add("--qos=${qos}")
            }
            
            return options.join(' ')
        }
    }
}

// Enable conda
conda {
    enabled = true
    useMamba = true          // Use mamba for faster environment creation
    createTimeout = '1 h'    // Time allowed for environment creation
    cacheDir = params.conda_cache_dir
    createOptions = "--file $projectDir/environment.yml"  // Use environment.yml to create the environment
}

// Remove singularity section
// And keep profiles

profiles {
    standard {
        process.executor = 'local'
    }
    slurm {
        process.executor = 'slurm'
    }
}

// Manifest for pipeline information
manifest {
    name = 'nf_BFFcent'
    author = 'Jake Lamb'
    description = 'Black Foot Ferrit variant caller'
    version = '1.0.0'
    nextflowVersion = '>=21.10.0'
}

// Reporting
timeline {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_timeline.html"
    overwrite = true
}
report {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_report.html"
    overwrite = true
} 
