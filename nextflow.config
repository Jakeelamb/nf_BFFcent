(base) [jlamb1@colostate.edu@login-ci3 variant-calling]$ cat nextflow.config
// Global default params
params {
    input = "samples.txt"
    outdir = "./results"
    publish_dir_mode = "copy"
    reference_genome = "${projectDir}/reference/GCF_022355385.1_MUSNIG.SB6536_genomic.fna.gz"  // Path to reference genome in the reference directory
    temp_dir = "./temp"    // Directory for temporary files
    skip_index_check = false  // Skip checking for reference genome index files (faster initialization)
    
    // SLURM cluster parameters - all optional
    slurm_account = "null"  // Optional SLURM account
    slurm_partition = "amilan"  // Default partition (if not specified by process)
    slurm_qos = "normal"        // Default QOS (if not specified by process)
    
    // Process-specific partition settings
    fastp_partition = "amilan"
    alignment_partition = "amilan" 
    ref_index_partition = "amem"
    samtools_partition = "amilan"
    gatk_haplotype_partition = "amilan"
    create_map_partition = "amilan"
    gatk_pipe_partition = "amem"
    concat_gvcfs_partition = "amilan"

    
    // Process-specific QOS settings (with null defaults)
    fastp_qos = "normal"
    alignment_qos = "normal"
    ref_index_qos = "mem"
    samtools_qos = "normal"
    create_map_qos = "normal"
    gatk_pipe_qos = "mem"
    gatk_haplotype_qos = "normal"
    concat_gvcfs_qos = "normal"

    
    // Conda settings - use existing environment
    conda_env_path = "/projects/.colostate.edu/rbortner/software/anaconda/envs/BFFcent"}

// Process-specific resource configurations
process {
    executor = 'slurm'
    // Use the existing conda environment instead of creating from environment.yml
    conda = params.conda_env_path
    
    // Build clusterOptions dynamically with only specified parameters
    clusterOptions = { 
        def options = [] 
        
        if (params.slurm_account) {
            options.add("--account=${params.slurm_account}")
        }
        
        if (params.slurm_partition) {
            options.add("--partition=${params.slurm_partition}")
        }
        
        if (params.slurm_qos) {
            options.add("--qos=${params.slurm_qos}")
        }
        
        return options.join(' ')
    }

    withName: FASTP_TRIM {
        cpus = 4
        memory = '16 GB'
        time = '6h'
        
        clusterOptions = { 
            def options = []
            
            if (params.slurm_account) {
                options.add("--account=${params.slurm_account}")
            }
            
            options.add("--partition=${params.fastp_partition}")
            
            def qos = params.fastp_qos ?: params.slurm_qos
            if (qos) {
                options.add("--qos=${qos}")
            }
            
            return options.join(' ')
        }
    }
    
    withName: BWAMEM2_ALIGN {
        cpus = 24
        memory = '48 GB'
        time = '24h'
        
        clusterOptions = { 
            def options = []
            
            if (params.slurm_account) {
                options.add("--account=${params.slurm_account}")
            }
            
            options.add("--partition=${params.alignment_partition}")
            
            def qos = params.alignment_qos ?: params.slurm_qos
            if (qos) {
                options.add("--qos=${qos}")
            }
            
            return options.join(' ')
        }
    }
    
    withName: SAMTOOLS_PROCESS {
        cpus = 24
        memory = '32 GB'
        time = '24h'
        
        clusterOptions = { 
            def options = []
            
            if (params.slurm_account) {
                options.add("--account=${params.slurm_account}")
            }
            
            options.add("--partition=${params.samtools_partition}")
            
            def qos = params.samtools_qos ?: params.slurm_qos
            if (qos) {
                options.add("--qos=${qos}")
            }
            
            return options.join(' ')
        }
    }
    
    withName: GATK_HAPLOTYPECALLER {
        cpus = 28
        memory = '64 GB'
        time = '24h'
        
        clusterOptions = { 
            def options = []
            
            if (params.slurm_account) {
                options.add("--account=${params.slurm_account}")
            }
            
            options.add("--partition=${params.gatk_haplotype_partition}")
            
            def qos = params.gatk_haplotype_qos ?: params.slurm_qos
            if (qos) {
                options.add("--qos=${qos}")
            }
            
            return options.join(' ')
        }
    }
    
    withName: CONCAT_GVCFS {
        cpus = 4
        memory = '16 GB'
        time = '12h'
        
        clusterOptions = { 
            def options = []
            
            if (params.slurm_account) {
                options.add("--account=${params.slurm_account}")
            }
            
            options.add("--partition=${params.concat_gvcfs_partition}")
            
            def qos = params.concat_gvcfs_qos ?: params.slurm_qos
            if (qos) {
                options.add("--qos=${qos}")
            }
            
            return options.join(' ')
        }
    }
    
    withName: GATK_JOINT_GENOTYPE {
        cpus = 32
        memory = '120GB'  // Explicitly set memory
        time = '156h'
        maxRetries = 3    // Add retry mechanism
        errorStrategy = 'retry'
        
        clusterOptions = { 
            def options = []
            
            if (params.slurm_account) {
                options.add("--account=${params.slurm_account}")
            }
            
            // Force the high-memory partition
            options.add("--partition=amem")
            
            // Force the high-memory QOS
            options.add("--qos=mem")
            
            return options.join(' ')
        }
    }

    withName: CREATE_SAMPLE_MAP {
        cpus = 1
        memory = '2 GB'
        time = '1h'

        clusterOptions = { 
            def options = []
            
            if (params.slurm_account) {
                options.add("--account=${params.slurm_account}")
            }
            
            options.add("--partition=${params.create_map_partition}")
            
            def qos = params.create_map_qos ?: params.slurm_qos
            if (qos) {
                options.add("--qos=${qos}")
            }
            
            return options.join(' ')
        }
    }
}

// Enable conda
conda {
    enabled = true
    useMamba = false
    // Don't create new environments, use the existing one
    createEnvironments = false
}

// Remove singularity section
// And keep profiles

profiles {
    standard {
        process.executor = 'local'
    }
    slurm {
        process.executor = 'slurm'
    }
}

// Manifest for pipeline information
manifest {
    name = 'nf_BFFcent'
    author = ''
    description = 'BFF variant caller'
    version = '1.0.0'
    nextflowVersion = '>=21.10.0'
}

// Reporting
timeline {\
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_timeline.html"
    overwrite = true
}
report {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_report.html"
    overwrite = true
} 